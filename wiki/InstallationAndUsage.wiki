=Checkout and installation of LLVM and Clang=

1) Get the required tools:
   {{{
   Read http://llvm.org/docs/GettingStarted.html#requirements
   }}}
2) Checkout LLVM:
   {{{
   LLVM_SRC=any_directory_you_like
   svn co http://llvm.org/svn/llvm-project/llvm/trunk llvm
   Download svn revision 139364
   }}}
3) Checkout Clang (C/C++ frontend):
   {{{
   cd LLVM_SRC/tools
   svn co http://llvm.org/svn/llvm-project/cfe/trunk clang
   To avoid conflicts between llvm and clang versions make sure you
   download clang version 3.0 tags/RELEASE_30/final 139290 
   }}}
4) Build LLVM and Clang:
   {{{
   cd .. (back to where you started)
   mkdir build (for building without polluting the source dir)
   cd build
   ../configure (you may need CC=gcc ../configure)
   make
   This builds both LLVM and Clang for debug mode.
   }}}

=Checkout and Installation of Wrapped Interval Analysis=
   {{{
   svn checkout http://wrapped-intervals.googlecode.com/svn/trunk/ wrapped-intervals
   cd wrapped-intervals
  ./configure --with-llvmsrc=LLVM_SRC
  ./make
   cd docs && make
   change variable WRAPPED_PATH in tools/run.sh properly
   }}}
=Run= 
  {{{
Usage: tools/run.sh prog[.c|.bc]  Pass [options] 

Pass is the pass that we want to run: 
  -wrapped-range-analysis        fixed-width wrapped interval analysis
  -range-analysis                fixed-width classical interval analysis
    options:
      -widening n                n is the widening threshold (0: no widening)
      -narrowing n               n is the number of narrowing iterations (0: no narrowing)
      -alias                     by default, -no-aa which always return maybe. If enabled 
                                 then -basic-aa and -globalsmodref-aa are run to be more precise
                                 with global variables.
      -enable-optimizations      enable LLVM optimizations
      -inline n                  inline function calls whenever possible if the size of 
                                 the function is less than n. (0: no inlining). 
                                 A reasonable threshold n is, e.g., 255.
      -instcombine               remove redundant instructions.
                                 It can improve precision by removing problematic casting 
                                 instructions among many other things.
                                 
  general options:
    -help                          print this message
    -stats                         print stats
    -time                          print LLVM time passes
    -dot-cfg                       print .dot file of the LLVM IR
    -debug                         print debugging messages
  }}}