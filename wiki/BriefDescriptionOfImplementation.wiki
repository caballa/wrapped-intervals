=Brief Description of the Implementation=

We provide two LLVM passes: -range-analysis and -wrapped-range-analysis. The former corresponds to the classical fixed-width interval analysis and the latter to our wrapped interval analysis. 

The implementation contains the main following classes:

  * FixpointSSI. This class implements an intraprocedural generic forward abstract interpreter. It is generic in the sense that it calls only methods from the virtual class AbstractValue. To plug in a new abstract domain should not be too hard. It should suffice to implement the methods from AbstractValue class. (It is worth mentioning that the fixpoint although sound it is imprecise for relational abstract domains due to the separate treatment of phi nodes.) The fixpoint is a classical iterative worklist-based fixpoint. It executes all instructions in the worklist until it is empty. Whenever an instruction changes the value of some variable its users (here we take advantage of the def-use chains available in LLVM) are added into the worklist. We only reason about variables that are in SSA form. The only non-standard feature is in the use of SSI (Static Single Information) form.

SSI form is an extension of SSA form that ensures that a
variable can be used only once through any path in the CFG. To do
that, SSI adds "sigma nodes" in addition to phi nodes. E.g., given
the following code:
{{{ 
if (x>=5)
   y = x;
else
   z = x;
endif
}}}

Its SSI version is:
{{{
if (x>=5)
   x.1 = sigma(x, if coming from then branch)
else
   x.2 = sigma(x, if coming from else branch)
endif
x.3 = phi(x.1,x.2) 
}}} 

Note that SSI form redefines x in the then branch to x.1 and x.2
in the else. Since x.1 and x.2 are in SSA form then, it is
straightforward for the analysis to refine x.1 to [5,+oo] and x.2
to [-oo,4], respectively.

SSI form is used for backward analyses but, in fact, it is not needed for forward analyses like ours. The main advantage of SSI is that it allows us to keep a unique map from variables to abstract values. Without SSI, each basic block should keep its own mapping which causes an important overhead to keep consistent the mappings across blocks. Originally we implemented a fixpoint which did not use SSI form but it turned out that it was significantly slower.

  * AbstractValue . Virtual class that declares main operations called by the fixpoint (e.g., standard classical abstract operations such as join, meet, etc).

  * BaseRange . Derived class from AbstractValue that implements common methods to Range and WrappedRange.

  * Range . Derived class from BaseRange that implements interval analysis.

  * WrappedRange . Derived class from BaseRange that implements our wrapped interval analysis.